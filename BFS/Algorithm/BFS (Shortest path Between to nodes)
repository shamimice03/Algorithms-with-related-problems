#include<bits/stdc++.h>
using namespace std;
bool visited[100];
int parent[100];

vector<int>edges[100];

void BFS(int s,int des){

  queue<int>Q;

  Q.push(s);

  visited[s]=1;

  while(!Q.empty()){

    int u=Q.front();
    cout<<u<<" ";
    Q.pop();

    for(int i=0; i<edges[u].size(); i++){

        if(visited[edges[u][i]]!=1){

            int v=edges[u][i];
            visited[v]=1;
            parent[v]=u;
            Q.push(v);
        }

        if(visited[des]==1) break;
    }
  }

 vector<int>path;
  path.push_back(des);
  int b=des;
  while(b!=s){
    b=parent[b];
    path.push_back(b);
  }
reverse(path.begin(),path.end());
  for(int i=0; i<path.size(); i++)
     cout<<path[i]<<" ";
  return;
}

int main()
{
    int n,e,u,v,start,End;

    cin>>n>>e;

    for(int i=1; i<=e; i++)
    {
        cin>>u>>v;

        edges[u].push_back(v);
        edges[v].push_back(u);
    }

    cin>>start>>End;

    BFS(start,End);

    return 0;
}
